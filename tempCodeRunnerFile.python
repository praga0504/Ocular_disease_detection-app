import os
from datetime import datetime
import streamlit as st
from io import BytesIO
from PIL import Image
from docx import Document 
from docx.shared import Inches
import google.generativeai as genai


# Configure the generative model
api_key = "AIzaSyDWU1ijnl0bJBh_LHjgdEjh3OlYeZuXTvc"
if api_key is None:
    raise ValueError("GEMINI_API_KEY is not set in environment variables")
genai.configure(api_key=api_key)

# Set up the model configuration for generation
generation_config = {
    "temperature": 1,
    "top_p": 0.95,
    "top_k": 64,
    "max_output_tokens": 8192,
    "response_mime_type": "text/plain",
}

model = genai.GenerativeModel(
    model_name="gemini-1.5-pro",
    generation_config=generation_config, 
)

def generate_glaucoma_report(glaucoma_image):
    # Open the image using PIL
    image = Image.open(glaucoma_image)
    current_date = datetime.now().strftime('%Y-%m-%d')
    
    # Define the prompt for the Gemini model
    prompt = f"""Analyze this retinal image and provide a detailed report regarding early glaucoma detection. Include all details based on the visual information you can extract. If you absolutely cannot determine a piece of information, state 'Unable to determine from the provided image.' Follow this structure:

GLAUCOMA DETECTION REPORT

1. PATIENT INFORMATION:
- Name:
- Date of Analysis:

2. IMAGE FINDINGS:
- Optic Disc:
- Cup-to-Disc Ratio:
- Rim Area:
- Nerve Fiber Layer Defects:
- Retinal Nerve Head (RNFL) Condition:
- Vascular Changes:

3. DIAGNOSIS AND INTERPRETATION:
- Suspected Glaucoma (Yes/No):
- Severity of Disease (if applicable):
- Possible Early Glaucoma Indicators:

4. CONCLUSION AND RECOMMENDATIONS:
- Summary:
- Recommendations:
- Caution: This analysis is generated by an AI system (MED360). For accurate diagnosis and treatment, please consult with a qualified healthcare professional. This interpretation is limited by image quality and available information. Immediate medical evaluation is recommended.

5. REPORTING DATE:
- Date of Report: {current_date}
"""

    # Start a chat session with Gemini
    chat_session = model.start_chat(history=[])
    response = chat_session.send_message([prompt, image])
    return response.text

def create_doc(report_text, glaucoma_image):
    # Create a Word document for the report
    doc = Document()
    doc.add_heading('Early Glaucoma Detection Report', 0)
    
    # Process the report and add it to the document
    for line in report_text.split("\n"):
        if line.strip() == '':
            continue
        if line.startswith('') and line.endswith(''):
            doc.add_heading(line.strip(''), level=1)
        elif line.startswith('-'):
            doc.add_paragraph(line.strip(), style='List Bullet')
        else:
            doc.add_paragraph(line.strip())

    doc.add_heading('Retinal Image:', level=1)
    
    # Add the retinal image to the document
    image_stream = BytesIO(glaucoma_image.getvalue())
    doc.add_picture(image_stream, width=Inches(6))

    # Save the document to a file stream
    file_stream = BytesIO()
    doc.save(file_stream)
    file_stream.seek(0)
    return file_stream

def main():
    st.title("Early Glaucoma Detection Using Deep Learning")
    
    # Section for uploading retinal image
    st.header("Attachments")
    glaucoma_image = st.file_uploader("Upload Retinal Image (for Glaucoma Detection)", type=["png", "jpg", "jpeg"])

    if glaucoma_image is not None:
        st.image(glaucoma_image, caption='Uploaded Retinal Image', use_column_width=True)

        if st.button("Generate Glaucoma Detection Report"):
            with st.spinner("Analyzing retinal image for glaucoma detection..."):
                glaucoma_report = generate_glaucoma_report(glaucoma_image)
            
            st.header("Generated Glaucoma Report")
            st.markdown(glaucoma_report)
            
            # Store the generated report in session state
            st.session_state.glaucoma_report = glaucoma_report

        # Check if the report has been generated
        if hasattr(st.session_state, 'glaucoma_report'):
            doc_file_stream = create_doc(st.session_state.glaucoma_report, glaucoma_image)
            st.download_button(
                label="Download Glaucoma Detection Report",
                data=doc_file_stream,
                file_name="Glaucoma_Report.docx",
                mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document"
            )

if __name__ == "_main_":
    main()